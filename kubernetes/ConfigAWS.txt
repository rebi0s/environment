################################################################
#Export Database Dumps
#


pg_dump -U postgres -W -F c -d db_iceberg > db_iceberg.dump

pg_dump -U postgres -W -F c -d db_hue > db_hue.dump

pg_dump -U postgres -W -F c -d db_superset > db_superset.dump

################################################
#Copy Dump File
sudo docker cp iceberg_postgres_db:/home/db_iceberg.dump . 

sudo docker cp iceberg_postgres_db:/home/db_hue.dump . 

sudo docker cp iceberg_postgres_db:/home/db_superset.dump . 


#Copy Dump to S3
aws s3 cp db_iceberg.dump  s3://rebios-test-env/rebios-backup/

aws s3 cp db_hue.dump  s3://rebios-test-env/rebios-backup/

aws s3 cp db_superset.dump  s3://rebios-test-env/rebios-backup/

#Copy Dump From S3

aws s3 cp  s3://rebios-test-env/rebios-backup/db_hue.dump .

aws s3 cp  s3://rebios-test-env/rebios-backup/db_iceberg.dump .

aws s3 cp  s3://rebios-test-env/rebios-backup/db_superset.dump .


#Deploy Postgres on Kubernetes

kc delete namespace rebios-postgres 

kc create namespace rebios-postgres 

kc apply -n rebios-postgres -f postgres-configmap.yaml

kc get configmap

kc apply -n rebios-postgres -f psql-pv.yaml

kc get pv

kc apply -n rebios-postgres -f psql-claim.yaml

kc -n rebios-postgres get pvc

kc apply -n rebios-postgres -f ps-deployment.yaml

kc -n rebios-postgres get deployments

#Check Postgres pods

kc get pods -n rebios-postgres

kc get services -n rebios-postgres

kc apply -n rebios-postgres -f ps-service.yaml

kc get svc -n rebios-postgres
#Connect to POD
kc exec -n rebios-postgres -it postgres-59d7fddd4-4tdf7 -- /bin/bash

#Connect to Postgres
psql --user=postgres --port=5432
psql -h localhost -U postgres --password -p 5432 

#Create Database and Users
CREATE DATABASE db_iceberg;
CREATE DATABASE db_hue;
CREATE DATABASE db_superset;
CREATE DATABASE db_datahub;
UPDATE pg_database SET datallowconn = 'true' WHERE datname = 'db_iceberg';
UPDATE pg_database SET datallowconn = 'true' WHERE datname = 'db_hue';
UPDATE pg_database SET datallowconn = 'true' WHERE datname = 'db_superset';
UPDATE pg_database SET datallowconn = 'true' WHERE datname = 'db_datahub';

CREATE ROLE role_iceberg LOGIN PASSWORD 'hNXz35UBRcAC';
CREATE ROLE role_hue LOGIN PASSWORD 'zahjo1poJeer';
CREATE ROLE role_superset LOGIN PASSWORD '7OL1LPsJ7SGI';
CREATE ROLE role_datahub LOGIN PASSWORD '5hFi2ngSI8Xe';

GRANT CONNECT ON DATABASE db_iceberg TO role_iceberg;
GRANT CONNECT ON DATABASE db_hue TO role_hue;
GRANT CONNECT ON DATABASE db_datahub TO role_datahub;
GRANT CONNECT ON DATABASE db_superset TO role_superset;


GRANT ALL privileges ON SCHEMA public TO role_hue;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO role_hue;

GRANT ALL privileges ON SCHEMA public TO role_iceberg;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO role_iceberg;

GRANT ALL privileges ON SCHEMA public TO role_superset;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO role_superset;

GRANT ALL privileges ON SCHEMA public TO role_datahub;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO role_datahub;

#Restore Databases
pg_restore  --dbname=db_iceberg --user=postgres --port=5432 --clean -d db_iceberg /tmp/db_iceberg.dump
pg_restore  --dbname=db_hue --user=postgres --port=5432 --clean -d db_hue /tmp/db_hue.dump
pg_restore  --dbname=db_superset --user=postgres --port=5432 --clean -d db_superset /tmp/db_superset.dump

#Install Spark
kc delete namespace rebios-spark

kc create namespace rebios-spark

helm install -n rebios-spark spark oci://registry-1.docker.io/bitnamicharts/spark -f values.yaml

kc -n rebios-spark get services

kc -n rebios-spark get pods 

#Master
kc exec -it -n rebios-spark spark-master-0   -- /bin/bash


#Configure Superset


aws s3 cp superset.db  s3://rebios-test-env/rebios-backup/

aws s3 cp s3://rebios-test-env/rebios-backup/superset.db  .

kc delete namespace rebios-superset

kc create namespace rebios-superset

kc -n rebios-superset delete pv superset-volume  

kc -n rebios-superset delete pvc superset-data

kc apply -n rebios-superset -f pv.yaml

kc -n rebios-superset get pv 

kc apply -n rebios-superset -f pvc.yaml

kc -n rebios-superset get pvc

kc apply -n rebios-superset -f configmap.yaml

kc apply -n rebios-superset -f scripts.yaml

sudo docker login --username jrosses --password DtrifNopan@111727

sudo docker pull jrosses/rebios-superset:1.0.1

kc apply -n rebios-superset -f bash.yaml

kc -n rebios-superset get pods

kc -n rebios-superset describe pods superset-bash-869dd8fd8d-hrvnc

kc exec -it -n rebios-superset superset-bash-869dd8fd8d-hrvnc   -- /bin/bash

kc apply -n rebios-superset -f redis.yaml

kc -n rebios-superset get pods

kc apply -n rebios-superset -f service-redis.yaml

kc apply -n rebios-superset -f superset-beat.yaml

kc -n rebios-superset get pods

kc apply -n rebios-superset -f superset-worker.yaml

kc -n rebios-superset get pods

kc apply -n rebios-superset -f superset.yaml

kc -n rebios-superset get pods

kc apply -n rebios-superset -f service-superset.yaml

kc apply -n rebios-superset -f ingress.yaml

http://3.91.223.236:80

export user=ue10797
kc config set-credentials uks-$user --embed-certs --client-certificate ./$user.csr --client-key ./$user.key
kc config set-cluster uks --embed-certs --certificate-authority kube-ca.crt --server https://177.220.120.104:6443
kc config set-context uks --cluster uks --user uks-$user --namespace rebios
kc config use-context uks
