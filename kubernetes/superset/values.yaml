ingress:
  enabled: true
  ingressClassName: nginx
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
  path: /
  pathType: ImplementationSpecific
  hosts:
    - superset.tkg-des.nuvem.unicamp.br
  tls:
  - hosts:
      - superset.tkg-des.nuvem.unicamp.br 
    secretName: superset.tkg-des.nuvem.unicamp.br-tls


## Superset node configuration
supersetNode:
  connections:
    db_host: iceberg-postgresql
    db_port: "5432"
    db_user: sperset
    #db_pass: superset
    db_name: db_superset
  
## Keep Postgreqsl.enabled: false to connect with existing postgresql instance.
postgresql:
  enabled: false
extraEnvRaw:
- name: DB_PASS
  valueFrom:
    secretKeyRef:
      name: superset-password
      key: password

init:
  adminUser:
    username: accettur
    firstname: Mauricio
    lastname: Accetturi
    email: accettur@unicamp.br
    password: admin

# extraSecrets:
  # custom_models.py: |-
  #   from flask_appbuilder.security.sqla.models import User
  #   from sqlalchemy import Column, Integer, ForeignKey, String, Integer, Sequence, Table
  #   from sqlalchemy.orm import relationship, backref
  #   from flask_appbuilder import Model
    
  #   class CustomUser(User):
  #       __tablename__ = 'ab_user'
  #       unidade = Column(String)
  #       codigounidade = Column(String)
  
  # custom_sso_security_manager.py: |-
  #   import logging
  #   from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Union
    
  #   from superset.security.manager import SupersetSecurityManager
  #   from custom_models import CustomUser
    
  #   #log = logging.getLogger(__name__)
    
  #   class CustomSecurityManager(SupersetSecurityManager):
  #       user_model = CustomUser
  #       # userdbmodelview = CustomUserDBModelView
    
  #       def get_oauth_user_info(self, provider: str, resp: Dict[str, Any]) -> Dict[str, Any]:
  #           # for Keycloak
  #           if provider in ["keycloak"]:
  #               me = self.appbuilder.sm.oauth_remotes[provider].get("endereco SSO")
  #               me.raise_for_status()
  #               data = me.json()
  #               #log.debug("User info from Keycloak: %s", data)
                
  #               print("imprimindo codigo da unidade")
  #               print(data.get("unidade", ""))
  #               print(data.get("codigoUnidade", ""))
    
  #               return {
  #                   "username": data.get("preferred_username", ""),
  #                   "first_name": data.get("given_name", ""),
  #                   "last_name": data.get("family_name", ""),
  #                   "email": data.get("email", ""),
  #                   "unidade": data.get("unidade", ""),
  #                   "codigounidade": data.get("codigoUnidade", ""),
  #               }
  #           else:
  #               return super().get_oauth_user_info(provider, resp)
    
    
  #       def _oauth_calculate_user_roles(self, userinfo) -> List[str]:
  #           user_role_objects = set()
        
  #           # apply AUTH_ROLES_MAPPING
  #           if len(self.auth_roles_mapping) > 0:
  #               user_role_keys = userinfo.get("role_keys", [])
  #               user_role_objects.update(self.get_roles_from_keys(user_role_keys))
        
  #           # apply AUTH_USER_REGISTRATION_ROLE
  #           if self.auth_user_registration:
  #               registration_role_name = self.auth_user_registration_role
        
  #               # if AUTH_USER_REGISTRATION_ROLE_JMESPATH is set,
  #               # use it for the registration role
  #               if self.auth_user_registration_role_jmespath:
  #                   import jmespath
        
  #                   registration_role_name = jmespath.search(
  #                       self.auth_user_registration_role_jmespath, userinfo
  #                   )
        
  #               # lookup registration role in flask db
  #               fab_role = self.find_role(registration_role_name)
  #               if fab_role:
  #                   user_role_objects.add(fab_role)
  #               else:
  #                   log.warning(
  #                       "Can't find AUTH_USER_REGISTRATION role: %s", registration_role_name
  #                   )
        
  #           return list(user_role_objects)
    
  #       def auth_user_oauth(self, userinfo):
  #           """
  #           Method for authenticating user with OAuth.
        
  #           :userinfo: dict with user information
  #                       (keys are the same as User model columns)
  #           """
  #           # extract the username from `userinfo`
  #           if "username" in userinfo:
  #               username = userinfo["username"]
  #           elif "email" in userinfo:
  #               username = userinfo["email"]
  #           else:
  #               #log.error("OAUTH userinfo does not have username or email %s", userinfo)
  #               return None
        
  #           # If username is empty, go away
  #           if (username is None) or username == "":
  #               return None
        
  #           # Search the DB for this user
  #           user = self.find_user(username=username)
        
  #           # If user is not active, go away
  #           if user and (not user.is_active):
  #               return None
        
  #           # If user is not registered, and not self-registration, go away
  #           if (not user) and (not self.auth_user_registration):
  #               return None
        
  #           # Sync the user's roles
  #           if user and self.auth_roles_sync_at_login:
  #               user.roles = self._oauth_calculate_user_roles(userinfo)
  #               #log.debug("Calculated new roles for user='%s' as: %s", username, user.roles)
        
  #           # If the user is new, register them
  #           if (not user) and self.auth_user_registration:
  #               user = self.add_user(
  #                   username=username,
  #                   first_name=userinfo.get("first_name", ""),
  #                   last_name=userinfo.get("last_name", ""),
  #                   email=userinfo.get("email", "") or f"{username}@email.notfound",
  #                   role=self._oauth_calculate_user_roles(userinfo),
  #                   #role=""
  #               )
  #               #log.debug("New user registered: %s", user)
        
  #               # If user registration failed, go away
  #               if not user:
  #                   #log.error("Error creating a new OAuth user %s", username)
  #                   return None
        
  #           #log.debug(f"tenant_id {userinfo['tenant_id']}")
        
  #           # Set unidade
  #           if "unidade" in userinfo:
  #               user.unidade = userinfo["unidade"]
  #           # Set codigounidade
  #           if "codigounidade" in userinfo:
  #               user.codigounidade = userinfo["codigounidade"]    
        
  #           # LOGIN SUCCESS (only if user is now registered)
  #           if user:
  #               self.update_user_auth_stat(user)
  #               return user
  #           else:
  #               return None
    
configOverrides:
  secret: |
    SECRET_KEY = 'B2Fj3RDXMOXMIGh3oQbDeBOBwyoratZzg5smyMD1zf2WhEaLekR/WA+Q'
  languages: |
    LANGUAGES = {
      "pt_BR": {"flag": "br", "name": "Brazilian Portuguese"},
      'en': {'flag': 'us', 'name': 'English'},
      }
  d3_format: |
    D3_FORMAT = {
        "decimal": ",",
        "thousands": ".",
        "grouping": [3],
        "currency": ["R$", ""]
      }
  feature_flags: |
    FEATURE_FLAGS = {
          "DASHBOARD_RBAC": True,
          "EMBEDDED_SUPERSET": True,
          "ENABLE_TEMPLATE_PROCESSING": True
        }    
  currencies: |
    CURRENCIES = ["USD", "EUR", "GBP", "INR", "MXN", "JPY", "CNY", "BRL"]  
    
  # enable_oauth: |
  #   # This will make sure the redirect_uri is properly computed, even with SSL offloading
  #   ENABLE_PROXY_FIX = True
    
  #   from flask_appbuilder.security.manager import (AUTH_DB, AUTH_OAUTH, AUTH_OID)
  #   from custom_sso_security_manager import CustomSecurityManager
  #   CUSTOM_SECURITY_MANAGER = CustomSecurityManager
  #   AUTH_TYPE = AUTH_OAUTH
  #   OAUTH_PROVIDERS = [
  #       {
  #           'name': 'keycloak',
  #           'token_key': 'access_token',
  #           'icon': 'fa-key',
  #           'remote_app': {
  #               'client_id': 'rebios-superset',
  #               'client_secret': 'Me8R8flMnSKywbe2DPuXvnvaHU060pir',
  #               'api_base_url': 'https://keycloak.nuvem.unicamp.br/realm/unicamp-auth',
  #               'client_kwargs': {
  #                   'scope': 'openid email profile'
  #               },
  #               'jwks_uri':'https://keycloak.nuvem.unicamp.br/realms/unicamp-auth/protocol/openid-connect/certs',
  #               'access_token_url': 'https://keycloak.nuvem.unicamp.br/realms/unicamp-auth/protocol/openid-connect/token',
  #               'authorize_url': 'https://keycloak.nuvem.unicamp.br/realms/unicamp-auth/protocol/openid-connect/auth'                  
  #                 },
  #       }
  #   ]
    
  #   # Map Authlib roles to superset roles
  #   #AUTH_ROLE_ADMIN = 'Admin'
  #   AUTH_ROLE_PUBLIC = 'GammaPublic'
    
  #   # Will allow user self registration, allowing to create Flask users from Authorized User
  #   AUTH_USER_REGISTRATION = True
    
  #   # The default user self registration role
  #   #AUTH_USER_REGISTRATION_ROLE = "Admin"
  #   AUTH_USER_REGISTRATION_ROLE_JMESPATH = "contains(['user 1', 'user 2'], username) && 'Admin' || 'Gamma'"
    
  #   PUBLIC_ROLE_LIKE = "GammaPublic"
    
  # custom_jinja: |
  #   from custom_sso_security_manager import CustomSecurityManager
  #   from custom_models import CustomUser
  #   from flask import g
  #   # Custom macros
  #   def current_user_unidade():
  #       return g.user.unidade
    
  #   def current_user_codigounidade():
  #       return g.user.codigounidade
    
  #   JINJA_CONTEXT_ADDONS = {
  #       'current_user_unidade': current_user_unidade,
  #       'current_user_codigounidade': current_user_codigounidade
  #   }
    
#instalação do authlib para autenticação central (oauth)        
bootstrapScript: |
  #!/bin/bash
  pip install Authlib==1.3.0
  pip install psycopg2-binary
  pip install pyhive thrift thrift_sasl
  if [ ! -f ~/bootstrap ]; then echo "Running Superset with uid {{ .Values.runAsUser }}" > ~/bootstrap; fi      
  
  
  
